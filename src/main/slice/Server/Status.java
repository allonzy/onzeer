// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Server;

public class Status implements java.lang.Cloneable, java.io.Serializable
{
    public boolean avaiable;

    public int memory;

    public int freeSpace;

    public Status()
    {
    }

    public Status(boolean avaiable, int memory, int freeSpace)
    {
        this.avaiable = avaiable;
        this.memory = memory;
        this.freeSpace = freeSpace;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Status _r = null;
        if(rhs instanceof Status)
        {
            _r = (Status)rhs;
        }

        if(_r != null)
        {
            if(avaiable != _r.avaiable)
            {
                return false;
            }
            if(memory != _r.memory)
            {
                return false;
            }
            if(freeSpace != _r.freeSpace)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Server::Status");
        __h = IceInternal.HashUtil.hashAdd(__h, avaiable);
        __h = IceInternal.HashUtil.hashAdd(__h, memory);
        __h = IceInternal.HashUtil.hashAdd(__h, freeSpace);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeBool(avaiable);
        __os.writeInt(memory);
        __os.writeInt(freeSpace);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        avaiable = __is.readBool();
        memory = __is.readInt();
        freeSpace = __is.readInt();
    }

    public static final long serialVersionUID = -5059954584424406663L;
}
